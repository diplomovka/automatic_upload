import math
import argparse
import os
import random
import sys
import uuid
from base64 import b64encode

parser = argparse.ArgumentParser()
parser.add_argument('--folder', '-f', required=True, help='relative path to folder, where will be generated data stored')
parser.add_argument('--rounds', '-r', required=True, type=int, help='number of rounds, which will generate files')
parser.add_argument('--size', '-s', required=True, type=int, help='size of each file, which will be generated by simulator')
parser.add_argument('--unique_chunks', '-u', type=int, default=10, help='number of unique chunks, from which will be chosen a subset to create a file')
parser.add_argument('--unique_chunk_size', '-us', type=int, default=1000, help='total size of each unique chunk, which will participate in files creation')

args = parser.parse_args()
folder_relative_path = args.folder
rounds = args.rounds
size = args.size
unique_chunks = args.unique_chunks
unique_chunk_size = args.unique_chunk_size

if not os.path.exists(folder_relative_path):
    os.makedirs(folder_relative_path)
elif not os.path.isdir(folder_relative_path):
    print('provided path to folder isn\'t a directory')
    sys.exit(-1)

unique_chunks_data = [os.urandom(unique_chunk_size) for i in range(unique_chunks)]

required_chunks = math.floor(size / unique_chunk_size)

for i in range(rounds):
    file_name = f'{uuid.uuid4()}.txt'

    file_content = b''
    for i in range(required_chunks):
        file_content += unique_chunks_data[random.randint(0, unique_chunks - 1)]

    # generate random bytes
    generated_data = b64encode(file_content).decode('utf-8')

    with open(f'{folder_relative_path}/{file_name}', 'w') as file:
        file.write(generated_data)